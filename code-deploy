#!/bin/sh
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
DIR=$(dirname $0)
CWD=$(pwd)

# FUNCTIONS
upload_artifact(){
  if [ ! -f $PACKAGE_OUTPUT_FILE ]; then
    echo "Artifact not found: $PACKAGE_OUTPUT_FILE"
    exit 1
  fi

  echo "Uploading $PACKAGE_OUTPUT_FILE..."

  aws s3 \
    --region $AWS_REGION \
    --profile $ENVIRONMENT \
    cp $PACKAGE_OUTPUT_FILE s3://${S3_DEPLOYMENT_BUCKET}/${S3_DEPLOYMENT_KEY}
}

deploy_artifact(){
  printf "Deploying $APP_NAME..."

  DEPLOYMENT_ID=$(
      aws deploy create-deployment ${DEPLOYMENT_OPTS} \
        --output text \
        --region $AWS_REGION \
        --profile $ENVIRONMENT \
        --application-name ${APP_NAME} \
        --deployment-group-name ${DEPLOYMENT_GROUP} \
        --s3-location bundleType=${PACKAGE_FORMAT},bucket=${S3_DEPLOYMENT_BUCKET},key=${S3_DEPLOYMENT_KEY}
  ) || exit 1

  if [ "${AWAIT_DEPLOYMENT}" = "true" ]; then
    await_deployment ${DEPLOYMENT_ID}
  fi
}

await_deployment(){
  STATUS="InProgress"
  while [ "$STATUS" = "InProgress" ]; do
    sleep 1
    printf "."
    STATUS=$(deployment_status ${1})
  done
  echo ""

  if [ "$STATUS" = "Failed" ]; then
    echo "Deployment failed"
    exit 1
  fi
}

deployment_status(){
  aws deploy get-deployment \
    --deployment-id $1 \
    --region $AWS_REGION |
        grep '"status"' | sed 's/^.*: *"\([^"]*\).*/\1/'
}

package(){
  if [ ! -d ${PACKAGE_DIR} ]; then
    echo "Package dir '${PACKAGE_DIR}' doesn't exists"
    exit 2
  fi

  mkdir -p $TMP_DIR || exit 1

  if [ ! "$1" = "" ]; then
    download_base_template $1 || exit 2
  fi
  create_package
}

download_base_template(){
  curl -sS $1 -o ${TMP_TPL}
  echo "Downloaded $TMP_TPL"
  unzip -q -d ${TMP_DIR} ${TMP_TPL}
}

create_package(){
  echo "Generating a package..."

  cp -R ${PACKAGE_DIR}/* ${TMP_DIR}/.
  cd ${TMP_DIR}

  mkdir -p $(dirname ${PACKAGE_OUTPUT_FILE})
  rm -rf ${PACKAGE_OUTPUT_FILE}
  zip -r ${PACKAGE_OUTPUT_FILE} *
}

usage(){
  echo "Usage: $0 <package|deploy|force_deploy>"
}

# EXTERNAL CONF
if [ -f ./$(basename $0).conf ]; then
  . ./$(basename $0).conf
fi

# VARIABLES
AWS_REGION=${AWS_REGION:-us-east-1}
APP_NAME=${APP_NAME?"not defined"}
DEPLOYMENT_GROUP=${DEPLOYMENT_GROUP:-default}
S3_DEPLOYMENT_BUCKET=${S3_DEPLOYMENT_BUCKET?"not defined"}
S3_DEPLOYMENT_KEY=${S3_DEPLOYMENT_KEY:-${APP_NAME}-$(date +%s).zip}
PACKAGE_OUTPUT_FILE=${PACKAGE_OUTPUT_FILE?"not defined"}
PACKAGE_DIR=${PACKAGE_DIR?"not defined"}
PACKAGE_FORMAT=zip
AWAIT_DEPLOYMENT=${AWAIT_DEPLOYMENT:-true}
DEPLOYMENT_OPTS=""
TMP_DIR="/tmp/codedeploy-$$"
TMP_TPL="/tmp/codedeploy-tpl-$$.zip"

# MAIN
if [ "$#" = "0" ]; then
  usage
  exit 1
fi

CMD=$1; shift
case ${CMD} in
  deploy)
    upload_artifact || exit 1
    deploy_artifact || exit 1
  ;;

  force_deploy)
    export DEPLOYMENT_OPTS="--deployment-config-name CodeDeployDefault.AllAtOnce"
    upload_artifact || exit 1
    deploy_artifact || exit 1
  ;;

  package)
    package $1 || exit 1
  ;;

  *)
    usage
    exit 1
  ;;
esac

rm -rf ${TMP_DIR} ${TMP_TPL}
